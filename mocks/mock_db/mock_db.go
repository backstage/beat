// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/backstage/beat/db (interfaces: Database)

package mock_db

import (
	db "github.com/backstage/beat/db"
	errors "github.com/backstage/beat/errors"
	schemas "github.com/backstage/beat/schemas"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *_MockDatabaseRecorder
}

// Recorder for MockDatabase (not exported)
type _MockDatabaseRecorder struct {
	mock *MockDatabase
}

func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &_MockDatabaseRecorder{mock}
	return mock
}

func (_m *MockDatabase) EXPECT() *_MockDatabaseRecorder {
	return _m.recorder
}

func (_m *MockDatabase) CreateItemSchema(_param0 *schemas.ItemSchema) errors.Error {
	ret := _m.ctrl.Call(_m, "CreateItemSchema", _param0)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) CreateItemSchema(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateItemSchema", arg0)
}

func (_m *MockDatabase) DeleteItemSchema(_param0 string) errors.Error {
	ret := _m.ctrl.Call(_m, "DeleteItemSchema", _param0)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) DeleteItemSchema(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteItemSchema", arg0)
}

func (_m *MockDatabase) FindItemSchema(_param0 *db.Filter) (*db.ItemSchemasReply, errors.Error) {
	ret := _m.ctrl.Call(_m, "FindItemSchema", _param0)
	ret0, _ := ret[0].(*db.ItemSchemasReply)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) FindItemSchema(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindItemSchema", arg0)
}

func (_m *MockDatabase) FindItemSchemaByCollectionName(_param0 string) (*schemas.ItemSchema, errors.Error) {
	ret := _m.ctrl.Call(_m, "FindItemSchemaByCollectionName", _param0)
	ret0, _ := ret[0].(*schemas.ItemSchema)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) FindItemSchemaByCollectionName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindItemSchemaByCollectionName", arg0)
}

func (_m *MockDatabase) FindOneItemSchema(_param0 *db.Filter) (*schemas.ItemSchema, errors.Error) {
	ret := _m.ctrl.Call(_m, "FindOneItemSchema", _param0)
	ret0, _ := ret[0].(*schemas.ItemSchema)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) FindOneItemSchema(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindOneItemSchema", arg0)
}
